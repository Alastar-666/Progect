// Операция 1: при нажатии клавиши число=0-9 -> R=R+число
// Операция 2: при нажатии клавиши backspace -> R=R-5
#include <windows.h>
#include <conio.h>
#include <iostream>
#include <time.h>

#define ESC 27
#define ZERO_KEY 48
#define NINE_KEY 57
#define BACK_SPACE 8

const static int MAX_LOG_SIZE = 1000;

long R = 0; // разделяемая глобальная переменная
clock_t waitTime; // время задержки (мс)

//функция потока
LPTHREAD_START_ROUTINE ThreadFunc(struct LogItem* p);
void setGlobalWaitTime(int argc, char* argv[]);
bool createAndStartThread(int i);
void wait(clock_t dt); // функция задержки

struct LogItem {
	int lineNumber; // порядковый номер операции
	int key; // код нажатой клавиши
	DWORD threadID; // идентификатор созданного потока
	clock_t timeStart; // время начала операции
	clock_t timeEnd = 0; // время завершения операции
	long R; // результат операции в дочернем потоке (разделяемая переменная)4
	long Rc; // результат операции главном потоке (переменная-дублер)
} mylog[MAX_LOG_SIZE];

int main(int argc, char* argv[])
{
	setGlobalWaitTime(argc, argv); // время задержки (мс)
	int i = 0; // счетчик операций
	long Rcontr = R; // переменная-дублер

	while (i <= MAX_LOG_SIZE)
	{
		//Прием кода нажатой клавиши
		if (_kbhit() != 0)
		{
			int key = _getch();
			if (key == ESC) {
				std::wcout << "I'm out" << std::endl;
				break;
			}
			else if (key == BACK_SPACE) {
				Rcontr -= 5;
			}
			else if (key >= ZERO_KEY && key <= NINE_KEY) {
				Rcontr += key - ZERO_KEY;
			}
			else {
				std::cout << "Wrong input: " << key << std::endl;
				continue;
			}

			// формируем строку журнала
			mylog[i].lineNumber = i;
			mylog[i].key = key;
			mylog[i].Rc = Rcontr;
			mylog[i].timeStart = clock();

			if (!createAndStartThread(i)) {
				return 0;
			}

			++i;
		}
	}
	return 0;
}

bool createAndStartThread(int i) {
	DWORD IDThread; // идентификатор потока
	HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ThreadFunc, &mylog[i], CREATE_SUSPENDED, &IDThread);
	if (hThread == NULL)
	{
		std::cout << "Thread error" << std::endl;
		return false;
	}
	else
	{
		// запуск потока
		mylog[i].threadID = IDThread;
		ResumeThread(hThread);
		return true;
	}
}

// Функция потока: имитация "чтения", корректировки
// и "записи" разделяемой переменной R
// параметр - указатель на текущую строку журнала
LPTHREAD_START_ROUTINE ThreadFunc(struct LogItem* p)
{
	long Rbuf = R;// чтение разделяемой переменной в буферную переменную
	int key = (*p).key;
	wait(waitTime);

	if (key == BACK_SPACE) {
		Rbuf -= 5;
	}
	else {
		Rbuf += key - ZERO_KEY;
	}
	// запись из буферной переменной в разделяемую переменную
	R = Rbuf;
	// запись результата в текущую строку журнала
	(*p).R = Rbuf;
	(*p).timeEnd = clock(); // время окончания работы потока

	int i = (*p).lineNumber;
	std::cout << i << ") key: " << mylog[i].key << ", thread id: " << mylog[i].threadID
		<< ", start: " << mylog[i].timeStart << ", end: " << mylog[i].timeEnd << ", " <<
		mylog[i].R << ", " << mylog[i].Rc << std::endl;
	return 0;
}

void setGlobalWaitTime(int argc, char* argv[]) {
	if (argc > 1) {
		waitTime = atoi(argv[1]);
	}
	else {
		waitTime = 0;
	}
}

// функция задержки
// параметр - время задержки в мс
void wait(clock_t dt) {
	clock_t tn;
	tn = clock();
	while (clock() - tn < dt);
	return;
}
