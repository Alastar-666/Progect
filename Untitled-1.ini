#include <iostream>
#include <windows.h>
#include <string>
#include <sstream>
#include <fstream>
#include <time.h>
#include <unordered_set>

using namespace std;

HANDLE handles[15];
DWORD ids[15];
DWORD dwExitCode[15];

clock_t start_of_task, end_of_task;
clock_t start_of_funk[15];
clock_t end_of_funk[15];

struct threadData { // струтура, для пердачи данных в функцию потока
    string* file_name;
    string* buf;
    string* path_to_file;
    clock_t* start_of_funk;
    clock_t* end_of_funk;
};

void RemoveSentence(string file_name, string& buf, string path_to_file, clock_t& start, clock_t& end) { // функция для поиска максималь-ного предложения

    start = clock();
    string sentence = "";
    char c;

    ifstream infile(path_to_file + "/" + file_name); // открытие файла для чтения
    while (infile.get(c)) { // чтение посимвольно
        sentence += c;
        if (c == '.' || c == '!' || c == '?') {
            if (sentence.length() < 50) {
                buf += sentence;
            }
            sentence = "";
        }
    }
    infile.close(); // закрытие файлa
    end = clock();
}

DWORD WINAPI RemoveSentenceThread(LPVOID arg) { // функция потока
    threadData* data = (threadData*)arg;
    RemoveSentence(*(data->file_name), *(data->buf), *(data->path_to_file), *(data->start_of_funk), *(data->end_of_funk));
    return 0;
}

// функция проверяет введеные имеа.
bool allStringsAreDistinct(string arr[], int n) {
    unordered_set<string> hash;
    for (int i = 0; i < n; i++) {
        if (hash.find(arr[i]) != hash.end()) {
            return false;
        }
        hash.insert(arr[i]);
    }
    return true;
}

// функция проверят существует ли файл.
bool fileExists(string filename) {
    ifstream file(filename);
    return file.good();
}

// данная функция меняет слеши в пути к файлу на обратные, чтобы не нужно было в ручную изменять скопированный путь.
string symbol_replace(string file_path) {
    char replaceChar = '/';
    for (int i = 0; i < file_path.length(); i++) {
        if (file_path[i] == '\\') {
            file_path[i] = replaceChar;
        }
        return file_path;
    }
}

int main(int argc, char* argv[]) {

    setlocale(LC_ALL, "Russian_Russia.1251");
    start_of_task = clock(); // Время начала работы

    int numberOfElements = argc - 4;
    int error = 0; // С помощью этой переменной мы можем поймать ошибки в введенных данных
    int WorkType = atoi(argv[1]); // Переменная для выбора режима работы

    string text_name[15];
    string path_to_file = symbol_replace(argv[2]); // Путь к папке с файлами
    string path_to_file_info = symbol_replace(argv[3]); // Путь к папке где хранится файл лога
    string buf[15];

    threadData data[15];

    ofstream write_in_file(path_to_file_info + "/info.txt");
    write_in_file << "Журнал работы программы: " << endl; // Я каждый раз либо создаю новый файл либо перезаписываю старый

    cout << "Место чтения файла выбранно: " + path_to_file << endl;
    cout << "Место записи информации о файле: " + path_to_file_info << endl;

    for (int i = 0; i < numberOfElements; i++) {
        text_name[i] = argv[i + 4];
    }

    //// проверка введеных имен.
    if (allStringsAreDistinct(text_name, numberOfElements)) {
        cout << endl << "Все введеные имена уникальны." << endl;
    }
    else {
        cout << endl << "Есть дублирующиеся имена." << endl;
        error = 1;
    }

    //проверка существования файлов.
    for (int i = 0; i < numberOfElements; i++) {
        string file_path = path_to_file + "/" + text_name[i];
        if (fileExists(file_path)) {
            cout << endl << "файл " << text_name[i] << " существет. " << endl;
        }
        else {
            cout << endl << "файл " << text_name[i] << " не существет! " << endl;
            error = 1;
            break;
        }
    }

    // проверка правильности введеного режима
    if (WorkType != 1 && WorkType != 2 && WorkType != 3) {
        cout << "Введен не существующий режим!" << endl;
        error = 1;
    }

    if (error == 0) {

        for (int i = 0; i < numberOfElements; i++) {
            start_of_funk[i] = 0;
            end_of_funk[i] = 0;
            buf[i] = "";
            data[i] = { &text_name[i], &buf[i], &path_to_file, &start_of_funk[i], &end_of_funk[i] };
        }

        if (WorkType == 1) {
            cout << "Выбран однопоточнй режим. " << endl;
            for (int i = 0; i < numberOfElements; i++) {
                start_of_funk[i] = 0;
                end_of_funk[i] = 0;
                RemoveSentence(text_name[i], buf[i], path_to_file, start_of_funk[i], end_of_funk[i]);
            }
        }
        else if (WorkType == 2) {
            cout << "Выбран многопоточный режим. " << endl;
            for (int i = 0; i < numberOfElements; i++) {
                handles[i] = CreateThread(NULL, 0, RemoveSentenceThread, &data[i], 0, &ids[i]);
            }
            WaitForMultipleObjects(numberOfElements, handles, TRUE, INFINITE);
            // закрытие дескрипторов потоков
            for (int i = 0; i < numberOfElements; i++) {
                GetExitCodeThread(handles[i], &dwExitCode[i]);
                CloseHandle(handles[i]);
            }
        }
        else if (WorkType == 3) {
            cout << "Выбран многопоточный режим с приоритетом. " << endl;
            for (int i = 0; i < numberOfElements; i++) {
                handles[i] = CreateThread(NULL, 0, RemoveSentenceThread, &data[i], CREATE_SUSPENDED, &ids[i]);
                SetThreadPriority(handles[i], THREAD_PRIORITY_HIGHEST);
                ResumeThread(handles[i]); // Запуск потока с новым приоритетом
            }

            WaitForMultipleObjects(numberOfElements, handles, TRUE, INFINITE);
            // закрытие дескрипторов потоков
            for (int i = 0; i < numberOfElements; i++) {
                GetExitCodeThread(handles[i], &dwExitCode[i]);
                CloseHandle(handles[i]);
            }
        }

        end_of_task = clock();

        for (int i = 0; i < numberOfElements; i++) {

            write_in_file << endl << "Время начала операции: " << start_of_funk[i] << endl;
            write_in_file << endl << "Время конца операции: " << end_of_funk[i] << endl;
            write_in_file << endl << "Время работы над данным текстом: " << (double)(end_of_funk[i] - start_of_funk[i]) / CLOCKS_PER_SEC << " секунд." << endl;

            write_in_file << endl << "===================== " << text_name[i] << " =====================" << endl;
            write_in_file << endl << "Текст " << i + 1 << " без предложений больше 50 символов: " << endl << buf[i] << endl;
            write_in_file << endl << "------------------------------------------------------------------" << endl;
            write_in_file << endl << "Время начала операции: " << start_of_funk[i] << endl;
            write_in_file << endl << "Время конца операции: " << end_of_funk[i] << endl;
            write_in_file << endl << "Время работы над данным текстом: " << (double)(end_of_funk[i] - start_of_funk[i]) / CLOCKS_PER_SEC << " секунд." << endl;
        }
        cout << endl << "Общее время работы: " << (double)(end_of_task - start_of_task) / CLOCKS_PER_SEC << " секунд." << endl;
        write_in_file << endl << "Общее время работы: " << (double)(end_of_task - start_of_task) / CLOCKS_PER_SEC << " секунд." << endl;

        write_in_file.close();

        if (WorkType == 2 || WorkType == 3) {
            for (int i = 0; i < numberOfElements; i++) {
                CloseHandle(handles[i]);
            }
        }
    }
    return 0;
}
